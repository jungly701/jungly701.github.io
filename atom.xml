<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jungly 博客</title>
  <subtitle>四面玲珑，五项全能。以上纯属瞎扯。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dusklife.com/"/>
  <updated>2017-02-20T16:10:45.006Z</updated>
  <id>http://dusklife.com/</id>
  
  <author>
    <name>jungly</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-01入坑需谨慎-论选好烘焙工具和烘焙原料的重要性</title>
    <link href="http://dusklife.com/2017/02/21/2017/02/201701_bakerydiary_tools/"/>
    <id>http://dusklife.com/2017/02/21/2017/02/201701_bakerydiary_tools/</id>
    <published>2017-02-20T16:10:05.000Z</published>
    <updated>2017-02-20T16:10:45.006Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ul>
<li>接触烘焙大概半年左右，期间做过芒果千层、牛奶吐司、海绵蛋糕、蛋糕卷、棉花糖版牛轧糖，都是比较基础的一些类型。其中芒果千层直接失败了，因为奶油被我打成了豆腐渣(打奶油竟然用了一个打奶油的头和一个打面粉的头)；牛奶吐司前后大概失败了十次，戚风蛋糕蛋糕失败了三次。蛋糕卷有了戚风蛋糕的基础，第一次就成功了(算是)。</li>
</ul>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><ul>
<li>总结几次失败的经验，除去手法、没经验、没认真学习等个人因素，选好烘焙工具和烘焙原料真的很重要。根据我使用工具的经验和教训，我总结了几点：<ul>
<li>在决定入坑之前，一定要上网找找相关的工具购买的教程，这样可以避免你买了日后你会嫌弃的工具。但是，很有可能在你看到这些指引的时候，也跟我一样，晚了。不过以后你再计划入手一些设备的时候，最好还是先多看一些教程，不能偏信一家之言；</li>
<li>不要购买烘焙套装，烘焙套装看起来东西很多，但是它真实价值绝对达不到它的标价。因为你会发现套装里面的工具，在你用一段时间之后，你会因为各种原因嫌弃它们。它们很多时候质量真的很一般，随后我会附上我的烘焙工具，你会发现我买的套装里面的工具基本被我弃用了；</li>
<li>不要买20多块钱的打蛋器，因为后面是拿来扔的，这20你是要亏的；</li>
<li>送的工具价值都不高，理由你自己琢磨；</li>
<li>一定要买烤箱温度计，因为烤箱都有温差，一定要先对烤箱的”脾气”摸底，具体可以参考链接的第七点<a href="https://zhuanlan.zhihu.com/p/24587206?refer=c_42728368" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/24587206?refer=c_42728368</a>;</li>
<li>烘焙真的是一个很庞大的体系，所需要的工具真的会很多，所以你也可以学我整理一个表格，这样你能知道你现有工具能大概做哪些，你还欠缺什么工具。在我整理完这份表格之前，我总感觉自己有什么东西没买，整完之后我发现现有工具已经够我做很多花样了。</li>
<li>烘焙真的是个大坑，深不见底。入坑需谨慎，反正截止目前为止，大概已经投入了2k RMB了(当然有一些是买错了)。</li>
</ul>
</li>
</ul>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><ul>
<li>如果你担忧自己是三分钟热度，买了好工具回来反而不会用，可以先不要太多的工具，选择其中一种基础先做试试。其中我个人比较建议蛋糕卷，需要的工具有：烤箱，烤盘，电动打蛋器和手动打蛋器各一个，油纸，刮刀，面粉筛(可以用烤箱自带的烤盘,也可以买个28*28的烤盘)原因有以下几点：<ul>
<li>你可以先不用买模具，即使买了烤盘，因为加热性能比较好，不粘底，你用来烤鸡翅什么的，不会浪费；</li>
<li>蛋糕卷对蛋白打发的要求没那么高，所以即使有点点消泡，口感上虽说没那么松软，但是不影响后面塑形、装饰，做起来的乐趣也会比做戚风蛋糕要高些。</li>
<li>蛋糕卷的可变性高，买点可可粉，买点抹茶粉，买点红曲粉，或者直接买食用色素，你就可以做颜值好高的蛋糕卷！例如像下面这些！</li>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_roll_cake_1.jpg" alt="高颜值的蛋糕卷1"></li>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_roll_cake_2.jpg" alt="高颜值的蛋糕卷2"></li>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_roll_cake_3.jpg" alt="高颜值的蛋糕卷3"></li>
<li>做蛋糕卷其实也有难点的，例如卷的时候蛋糕体开裂啊，卷很松散，奶油跑得到处都是整体很”脏”的感觉啊，这些问题都需要你去研究解决方法的。这样你可以在这个过程中，去确认自己到底有没有这方面的耐心，对烘焙是不是真的那么感兴趣。</li>
</ul>
</li>
</ul>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul>
<li>以下是我的个人装备，我会把我在用的情况、装备的规格参数、品牌、价格都写上，而因本次主要讲工具，我使用的原材料附在表上，不详细展开讲。</li>
<li>下载地址戳这里<a href="http://pan.baidu.com/s/1dFegpB7" target="_blank" rel="external">O(∩_∩)O</a></li>
</ul>
<h3 id="烘焙工具"><a href="#烘焙工具" class="headerlink" title="烘焙工具"></a>烘焙工具</h3><ul>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_tools_1.jpg" alt="烘焙工具"></li>
</ul>
<h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_tools_2.jpg" alt="辅助工具"></li>
</ul>
<h3 id="称量工具"><a href="#称量工具" class="headerlink" title="称量工具"></a>称量工具</h3><ul>
<li><img src="http://dusk-life.b0.upaiyun.com/2017/bakery_diary_tools_3.jpg" alt="称量工具"></li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul>
<li>我爱烘焙，入坑，心甘情愿。</li>
</ul>]]></content>
    
    <summary type="html">
    
      好的工具真的很重要
    
    </summary>
    
      <category term="bakery" scheme="http://dusklife.com/categories/bakery/"/>
    
    
      <category term="生活" scheme="http://dusklife.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="烘焙" scheme="http://dusklife.com/tags/%E7%83%98%E7%84%99/"/>
    
      <category term="总结，经验" scheme="http://dusklife.com/tags/%E6%80%BB%E7%BB%93%EF%BC%8C%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>如果你是文职类/管理类岗位的，你可(bi)能(xu)具备以下技能</title>
    <link href="http://dusklife.com/2016/11/22/2016/11/working_skill/"/>
    <id>http://dusklife.com/2016/11/22/2016/11/working_skill/</id>
    <published>2016-11-22T13:38:30.000Z</published>
    <updated>2017-01-09T12:35:38.875Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul>
<li>在文章的开始我想引用一个影响我比较重要的故事。完整我暂时找不到了，我描述大概的，如果有天我找到原文了，我再更新到这里。 </li>
</ul>
<blockquote>
<p>故事是第一人称写的，上司的角度。他在招聘人的时候挑了一个条件比较优秀的姑娘，然后这个姑娘在做了一段时间之后跟他辞职，辞职的理由是觉得自己有点被大材小用，整天不是处理文档，整理资料，就是黏贴发票。然后他告诉这个姑娘，其实他自己也是从一个文员做到了大领导的助理（类似高级秘书之类的），最开始的时候也是做这些繁杂和重复的事情，但是他在这些事情里面找到了一些规律，例如领导的处理事情的思维，通过发票发现领导的出差规律，然后后来的后来，他成了领导的得力助手，被提拔。然后姑娘暂时打消了辞职的念头，可是过了一段时间之后她还是辞职了。</p>
</blockquote>
<ul>
<li>其实我觉得这些技能也不单单是对文职类工作，对很多职能岗位都适用。希望你看了能有所启发。</li>
</ul>
<h2 id="文档撰写能力-逻辑性"><a href="#文档撰写能力-逻辑性" class="headerlink" title="文档撰写能力/逻辑性"></a>文档撰写能力/逻辑性</h2><ul>
<li>这两个放在一起是有理由的，你逻辑的好坏决定了你写出来的文字可读性的高低。而我自己写东西很注重<code>逻辑性</code>和<code>书面性</code>。</li>
<li>如果你的工作不是写政府公告、政府文件、企业公告等等这些，对应用文要求不那么严格的场合，你可以不去深入学习应用文写作，但是你需要有意识地去提升你语言的逻辑性和书面化，尽量让你写出来的东西是有条理的，别人阅读的时候是能很清晰地获取信息，先是什么然后是什么最后才是什么。逻辑清晰的文字让人读起来是很舒畅的。</li>
<li>错别字、语句歧义这些基本错误，能别犯就别犯了。</li>
<li>书写通知/汇报事情的时候，我一般会按照这样的思路去思考，然后书写：<ul>
<li>书写这个通知/汇报的缘由是什么（基于什么原因，出现了什么问题）。</li>
<li>然后为了解决这个问题做了哪些工作（这个非必要的，要看具体的情况来定）。</li>
<li>然后结论/解决问题的方式是什么（解决问题的方式也要按照处理的顺序来写，先做什么再做什么，如果这些之间没有必要的联系，那么就是要想哪些可以归类在一点上面说明，哪些必须分开描述）。</li>
<li>解决问题涉及的人员有哪些，或者说解决问题需要哪些人员/部门协助</li>
<li>P.S.如果是口头向领导汇报的话，一般情况我是直接说出了什么状况，需要我/领导/部门完成什么事情，然后稍微停顿一下看看领导对事情的起因是否关心，如果他不关注再继续说是否要去做这个事情，或者要完成这个事情会遇到什么问题，这样解决是否合适</li>
<li>P.S.的P.S.关于汇报工作我特别想要建议你，最好是给领导<code>判断题</code>，次之是<code>选择题</code>，最差的就是<code>问答题</code>。</li>
</ul>
</li>
<li>提升文档编写能力和提升逻辑思维，建议多阅读多思考，以下是我自己在用的一些方法：<ul>
<li>1.应用文写作（用高校教科书比较合适，至于哪个版本你可以自己选）。</li>
<li>2.学习用<code>X-mind</code>等思维导图工具帮助你梳理思路（这个适合在发散思维的时候用），关于思维导图我推荐这篇文章：<a href="http://code.youmeek.com/2016/03/07/2016/02/My-Learning-Way/" target="_blank" rel="external">我的学习、归纳方法（以学习 Maven 为例）</a></li>
<li>3.学习思考方法推荐：<a href="https://www.amazon.cn/3/dp/B00MO118L8/ref=sr_1_1?ie=UTF8&amp;qid=1479785833&amp;sr=8-1&amp;keywords=%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83" target="_blank" rel="external">系统思考</a>和<a href="https://www.amazon.cn/%E7%AC%AC%E4%BA%94%E9%A1%B9%E4%BF%AE%E7%82%BC-%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%BB%84%E7%BB%87%E7%9A%84%E8%89%BA%E6%9C%AF%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E5%BD%BC%E5%BE%97%C2%B7%E5%9C%A3%E5%90%89/dp/B0080BKVTQ/ref=sr_1_14?ie=UTF8&amp;qid=1479785833&amp;sr=8-14&amp;keywords=%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83" target="_blank" rel="external">第五项修炼:学习型组织的艺术与实践</a></li>
</ul>
</li>
</ul>
<h2 id="理解能力"><a href="#理解能力" class="headerlink" title="理解能力"></a>理解能力</h2><ul>
<li><strong>多阅读多阅读多阅读，查资料查资料查资料</strong>。</li>
</ul>
<h2 id="资料整合能力"><a href="#资料整合能力" class="headerlink" title="资料整合能力"></a>资料整合能力</h2><ul>
<li>关于资料整理，我在写一篇关于如何用<code>配置管理</code>思想做<code>文档管理</code>，里面会详细讲到，但是我还没完善好，而且进度有点慢。但是我简单地提一句就是，养成整理资料的习惯，培养一套属于你自己的整理方法，无论对工作还是生活，都是很有意义的。</li>
<li>我工作中喜欢把一些重要的信息进行整合，那样在有需要的时候，我能很快地提供这些信息。</li>
</ul>
<h2 id="沟通协调能力"><a href="#沟通协调能力" class="headerlink" title="沟通协调能力"></a>沟通协调能力</h2><ul>
<li><p>关于沟通的技巧，有很多书籍，我也不班门弄斧。我就说说我平常在跟人沟通的时候一些技巧：</p>
<ul>
<li><strong>学会聆听</strong>：其实学会聆听比学会表达更重要。学会聆听别人讲话，筛选出你需要的一些信息。如果你觉得对方讲得太啰嗦或者没有重点的时候，可以适当地在一段话的中间帮他总结一下，“也就是在XX情况然后出现了XX事情，你觉得这样是XX的，对吧？”这样第一可以让对方意识自己想表达的重点，第二你可以确认这个是不是他想表达的重点，第三可以让对方了解到，你有认真在听他讲话。</li>
<li>我有面试过一个女孩子，讲话喜欢占主动。在我问问题的时候，还没听完我问什么，就开始表达她想要论述的观点。第一这样很不尊重对方，第二如果表达的内容跟对方想要的答案差之千里，就得不偿失了……</li>
<li><strong>必要时采用强硬态度</strong>：我性格比较随和，很友好很友善。但是如果有些事情我重复讲过而且重点论述的情况下，执行人还是没有执行的话，我会通过<strong>提高声调</strong>或者<strong>加重语气</strong>等方式，提高对方对事情的重视程度。因为我认为一般人只要不是脑部有残疾，智商都不至于差到哪里，都是普通人，所以其实就是愿不愿意花心思去理解的问题。所以对方不愿意执行，那我会明确告知后果，让对方自行承担结果。（不过这种一般我是针对老油条使用，而且如果你也采用这种方式，你必须先保证你自己的工作已经做到位了，不然后果还是会殃及你自己的）</li>
<li><strong>明确自己想要得到什么信息/结果再沟通这样会更有效率</strong>：其实就是把问题分细了再问。</li>
<li>很多时候一个事情会需要N个执行部门去共同完成。你把“一个事情应该怎么做”问其中一个部门，很难得到你想要的答案的。你想偷懒，别人也会想偷懒。我为什么要把别人的事情弄得那么清晰然后告诉你呢？对我有什么好处呢？</li>
<li><p>假设有一个事情我是发起人，但是我不知道有哪些部门需要参与，我也不清楚我要输出什么资料，这种情况我会用逆向推导，从我想要的结果出发去推导上一层的执行部门是哪个部门，完成的是什么事情，然后我会问他们，“如果你们需要输出这个结果，那么你需要的输入是什么”。根据他们的回答再往上追溯，直到他们的输入是我能提供的输出。然后我就知道完成这件事，我需要输出什么，参与部门有哪些，部门与部门之间衔接的关系是怎么样的。</p>
<blockquote>
<p>一开始接触CMMI的时候，我去问公司里面一个有CMMI评级经验的前辈，我问她我们公司软硬结合的项目和纯软的项目在QA管理上有什么特别不一样的地方吗？有哪些工作是QA的职责范围内的？这两个问题属于比较大的问题，我并没有得到答案。现在看来，这两个问题我估计没有一两节培训课讲不清楚。其实就是因为我问的方式不好，才导致我得不到我想要的信息，在这个过程中我自己是偷懒了，没有认真地了解过，直接把问题丢给别人，得不到答案也是理所当然的。</p>
</blockquote>
</li>
<li><p><strong>保留证据</strong>：这个不用我多说了，特别是有一些容易出现争议的情况，最好是以书面或者企业内部沟通工具进行沟通。</p>
</li>
<li><strong>谨慎发言</strong>：出现问题了先查前因后果，细枝末节再发言，比你一无所知就发言，要来得好。但是这个有点不好的就是，回应事件的速度就会比较慢。</li>
<li><strong>顺序沟通</strong>：按照“执行者-执行者”、“执行者-对方领导”、“执行者-己方领导”、“己方领导-对方领导”的顺序进行沟通。就是你和协助部门的执行人员沟通无果后在找对方领导，对方领导沟通无果了找自己领导汇报情况，由自己领导跟对方领导直接沟通。但是前面两个，在不能确认对方执行者是谁的时候，可以先找领导确认情况，询问该事项可以找谁协助。</li>
</ul>
</li>
</ul>
<h2 id="信息传递能力"><a href="#信息传递能力" class="headerlink" title="信息传递能力"></a>信息传递能力</h2><ul>
<li>我一直倡导身边的人，少做<code>文字的搬运工</code>，多做<code>信息的传递者</code>。别人发的信息，要通过自己的过滤和筛选之后再发出来。</li>
<li>说一个很现实的情况就是，在你手上发出的信息，不管原来来源是哪里，信息是否正确，你把这个消息传播了，你就有连带责任。</li>
<li>第二层是，要对信息进行二次处理。这个二次处理并不是说你要去修改、润色别人的信息，而是说，在你发布出去之前，能够尽可能了解这个信息的关联信息。</li>
<li>我会通过举一个例子来告诉你，我是怎么定义<code>文字的搬运工</code>和<code>信息的传递者</code>：</li>
</ul>
<blockquote>
<p>小A和小B分属两个部门，当公司发了一项通知，小A看了之后，把相关的人组了一个沟通群，然后把消息发出去：<br>然后C问：出现XX情况了怎么办呢？<br>A回答：我去问一下。<br>D问：那像XX情况又算不算是呢，怎么解决呢？<br>A回答：可能可以吧，我去确认一下<br>而小B根据相关人员的情况，先推导出有可能出现哪些情况，然后跟发通知的人确认后，随后组了一个沟通群，把消息发出来：<br>E问：出现XX情况了怎么办呢？<br>B回答：这种情况是可以这么解决的。<br>F问：那像XX情况又算不算是呢，怎么解决呢？<br>B回答：是在XX范围内的，可以按照原文中解决<br>G问：假设我的情况不在范围内呢？<br>B回答：你这个情况比较特别我没考虑到，我要先确认一下再回复你。</p>
</blockquote>
<ul>
<li>在上面这个例子中，公司发布了什么通知出现了什么情况，不重要，所以我不花时间详细描述。对A我分类为文字的搬运工，B为信息的传递者。当然我不会知道B在传递消息前做了哪些工作，但是时间长了，我会逐渐形成一种意识，B对问题的反应速度快，她在处理事情中很可靠。一个人工作，除了一些专业技能，他要能在工作环境中游刃有余，靠的就是他在别人心中的信誉值。一个人工作越是容易出错，越是一问三不知，在他人心中的信誉值就越低。别人在跟他协同工作的时候配合度就越低。</li>
</ul>
<h2 id="适应体制能力或者说自我调整能力"><a href="#适应体制能力或者说自我调整能力" class="headerlink" title="适应体制能力或者说自我调整能力"></a>适应体制能力或者说自我调整能力</h2><ul>
<li>正如人无完人，永远都没有完美的规章制度，没有完美的体制。一个公司总会有很多弊病让你苦不堪言。要么你就是跳槽走人，要么你就学会适应这个体制，你有能力和机会的时候，去改善它，优化它，停止抱怨寻求解决方法。</li>
<li>嗯，自我调整中。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>我总结出来，并不是说我能完完全全方方面面都做到，而是通过整理，我能够明确自己在哪些地方可以优化，在哪些方面可以努力去做。</li>
<li>其实无他，工作就是不断学习。 </li>
</ul>]]></content>
    
    <summary type="html">
    
      其实我觉得这些技能也不单单是对文职类工作，对很多职能岗位都适用。希望你看了能有所启发
    
    </summary>
    
      <category term="Working" scheme="http://dusklife.com/categories/Working/"/>
    
    
      <category term="技能" scheme="http://dusklife.com/tags/%E6%8A%80%E8%83%BD/"/>
    
      <category term="自我增值" scheme="http://dusklife.com/tags/%E8%87%AA%E6%88%91%E5%A2%9E%E5%80%BC/"/>
    
      <category term="自我要求" scheme="http://dusklife.com/tags/%E8%87%AA%E6%88%91%E8%A6%81%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>如何用配置管理思想做文档管理（系列二：配置管理过程解读）</title>
    <link href="http://dusklife.com/2016/11/20/2016/11/mywork_cm_introduce_2/"/>
    <id>http://dusklife.com/2016/11/20/2016/11/mywork_cm_introduce_2/</id>
    <published>2016-11-20T11:03:52.000Z</published>
    <updated>2017-03-18T16:48:10.045Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>在CMMI中，配置管理属于二级成熟度中的过程域，CMMI总共5级成熟度，数字越大代表成熟度越高，从配置管理所处的成熟度来讲，它是比较低级的，换句话来讲，它是属于比较基础和容易实现的。</li>
<li>一个项目团队要优化它的管理流程，可以以配置管理的方向出发，用它的思想去审查现阶段的管理有哪些缺漏的地方(相当于一次配置审计)，往往能得到不错的效果。</li>
<li>在CMMI中，是这么定义配置管理的目的：使用配置识别，配置控制，配置状态记录和配置审计，来达到建立与维护工作产品之完整性。</li>
<li>根据我个人的工作经验及个人见解，我将配置管理理解为三个部分：<ul>
<li>配置系统：包含了配置识别和配置控制的工作，是配置管理最基础和必要的部分</li>
<li>配置状态记录：记录配置项的状态，配置项的变化，配置项的差异</li>
<li>配置审计：确认实际的管理状态是否达到预期的手段</li>
<li>详细可见下图</li>
<li><img src="http://dusk-life.b0.upaiyun.com/2016/mywork_cm_introduce_1.jpg" alt="CMMI配置管理解读"></li>
</ul>
</li>
</ul>
<h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><ul>
<li>从配置项出发，用逆向思维和顺序思维来看配置系统：<ul>
<li>逆向：要管理的配置项是从配置计划中来的，而配置计划又是基于项目计划来定制的，在做项目计划的时候，要定义的肯定有项目会经过哪些阶段</li>
<li>例如一个全新项目的开发，采用瀑布式的开发模型，按照要求必须经历立项-需求分析-概要设计-详细设计-编码-测试-交付整个过程;，而基于现有产品的特殊定制的项目，可能在需求分析和确认后，直接进入到编码开发，省略掉概要设计和详细设计的步骤。</li>
<li>总结来讲就是，要管理配置项，首先必须要识别出要管理哪些配置项，而识别的基础就是对项目过程的定义(一般由项目管理规程+项目过程裁剪指南得出) </li>
<li>顺序：既然有了要管理的配置项，就必须要有一个地方存放这些项目资产，从配置项的定义和所涵盖的内容来看，配置项是一个项目里特别重要的项目资产，所以存放的地方必须足够的安全。同时又必须保证，存放那么多东西，不会乱。</li>
<li>所以存放配置项的这个“空间”，要定义如何存放的规则(目录结构)和定义相关(以及非相关)人员的读/写权限的规则(权限管理) 。</li>
<li>顺序：在上一篇文章中我介绍过一个常规瀑布式的开发模型可以建立5个基线，并且只能通过变更过程才能改变它的内容，所以配置系统还需要有一个变更控制过程来支撑。</li>
<li>例如当客户需求发生变化时，由产品经理获取客户的最新需求，填写变更申请，项目干系人收到变更申请后，评估需求的可行性以及对项目的影响，确认能否实现变更。若能实现则将评估结果提交项目经理/上级领导审批，然后执行变更，相关人员需验证和确认变更结果后，产品经理反馈结果给客户/提交最新产品给客户。</li>
</ul>
</li>
<li>综上所述，一个配置系统，需要有项目管理规程和裁剪指南来定义某一个特定项目有哪些配置项需要管理，该项目会形成多少个基线，然后需要有一个定义了存放规则和读写权限的安全的系统/服务器/空间来存放这些配置项，最后需要一个变更管理过程来支持那些可能会被改变的配置项进行变更or不变更。</li>
</ul>
<h2 id="维护配置系统的一致性"><a href="#维护配置系统的一致性" class="headerlink" title="维护配置系统的一致性"></a>维护配置系统的一致性</h2><ul>
<li>当搭建起配置系统后，需要通过一些记录行为和审核行为，来确定配置项处于正确的状态。</li>
</ul>
<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><ul>
<li>一般我们需要记录的内容有：<ul>
<li>配置项的状态记录：记录配置项的发布/未发布，版本，受控/非受控等状态，通过记录，可以让项目干系人快速知晓当前所使用的版本是否与系统一致，确保他们能够快速地存取和了解配置项的配置状态。</li>
<li>变更申请记录：即一旦有提出变更，该变更申请应该被记录。</li>
<li>变更记录：变更申请提出后，无论是变更被执行或被拒绝，都应该被记录，方便后续查询已通过的变更，变更了哪些内容，以及未通过的变更是基于什么原因被拒绝。</li>
<li>不同基线之间的差异：当发生变更，我们在处理变更后，需要将变更前后的基线差异进行记录，后续有需求的时候可以回滚到前面的任何一个版本 </li>
<li>配置项的修订历史：与基线差异不同的是，修订历史记录的是单个配置项在项目整个生命周期的演变过程，而基线差异是指组成某一基线的所有配置项的差异的总和。</li>
</ul>
</li>
</ul>
<h3 id="配置审计"><a href="#配置审计" class="headerlink" title="配置审计"></a>配置审计</h3><ul>
<li>配置审计可以分为两种，一种是日常配置管理工作中的配置审计，一般发生在基线建立的时间，而另外一种是定期的对配置系统、配置项的一种审查，确认配置管理被正确、有效地执行，同时会将审计结果作为管理优化的一种参考。</li>
<li>例如当产品进入发布阶段，需要建立发布基线时，首先要确认《readme》、《用户手册》、《安装配置手册》、《软件产品质量报告》和产品安装包等文件是否齐全（按配置计划要求），是否处于指定的受监控的位置，其次是要确认这几项配置项，是一一对应的。当发生发布基线的变更时，变更影响中提到的相关配置项是否被同步变更，状态是否按照变更要求发生了变化。这种事日常配置审计工作。</li>
<li>而定期的配置审计，如每年一次，就会复杂得多，需要确认配置系统是否完整，是否有正常运行，权限管理是否按照规范执行，抽查的项目中，需要被记录的内容是否已经有记录， 配置项是否按照配置管理计划进行管理。</li>
</ul>
<h2 id="CMMI配置管理解读"><a href="#CMMI配置管理解读" class="headerlink" title="CMMI配置管理解读"></a>CMMI配置管理解读</h2><ul>
<li>在上面的内容中，已经简单地系统地介绍配置管理的三个主要工作，我个人觉得对于软件资产的保管，能做到这个程度，其实已经很规范的了。</li>
<li>如果你只是想要简单了解配置管理，那么读到这个位置，其实是可以结束的了。而如果你希望更深入地解读配置管理，欢迎点击下载我整理好的一份文件，里面我会逐条解读CMMI文件里面的配置管理。当然我肯定有解读不正确或者有偏差或者不成熟的地方，很欢迎给我留言或者给我发邮件批评指正：452053608@qq.com</li>
<li>为了保证CMMI原文件的完整性，我在解读CMMI的配置管理中，是直接将原文件进行截图，然后在上方进行标注，点击这里下载O(∩_∩)O</li>
</ul>]]></content>
    
    <summary type="html">
    
      深入理解配置管理
    
    </summary>
    
      <category term="Working" scheme="http://dusklife.com/categories/Working/"/>
    
    
      <category term="配置管理" scheme="http://dusklife.com/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="文档管理" scheme="http://dusklife.com/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
    
      <category term="CM" scheme="http://dusklife.com/tags/CM/"/>
    
      <category term="过程支持" scheme="http://dusklife.com/tags/%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/"/>
    
      <category term="项目管理" scheme="http://dusklife.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何用配置管理思想做文档管理（系列一：入门）</title>
    <link href="http://dusklife.com/2016/11/06/2016/11/mywork_cm_introduce/"/>
    <id>http://dusklife.com/2016/11/06/2016/11/mywork_cm_introduce/</id>
    <published>2016-11-06T11:03:52.000Z</published>
    <updated>2017-01-09T12:48:06.021Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ul>
<li>现实环境：有关配置管理，大部分人听到这个词语都是一脸懵逼，完全无法理解这个职业是在做什么。也有人误解，会觉得配置管理无足轻重，而且很多公司对这一块的管理要求都不高。</li>
<li>网络环境：<ul>
<li>在亚马逊（平常喜欢在这里购书）搜索了一下关于配置管理的书，是寥寥无几。而自己看书有一点不好的就是，你得自己琢磨，对理解力要求比较高。</li>
<li>在网上搜索一下资料，很多都在讲述配置管理的一些基本概念，未入门的看得那是晦涩难懂。</li>
<li>在知乎、百度贴吧尝试搜索了一下关键字“配置管理”，活跃的话题很少。</li>
</ul>
</li>
<li>实际上配置管理并不是门槛那么高的职业，当你在对一系列文件进行管理的时候，其实已经在做配置管理,尽管并不全面。所以我希望通过这系列的文章，跟你简单地讲讲，配置管理是做什么的，可以怎么做</li>
<li>我工作经验也不久，所以肯定有写得不好的地方，你可以指出来，我们可以讨论交流一下。套用youmeek的一句话就是，博客是个适合打脸的地方。如果你发现我理解有错的地方，并且愿意给我指点迷津的，欢迎联系我email：<strong>452053608@qq.com</strong></li>
</ul>
<h2 id="系列说明"><a href="#系列说明" class="headerlink" title="系列说明"></a>系列说明</h2><ul>
<li>本系列会分为3大篇，3大篇对应的内容分别如下<ul>
<li>1.如何简单地理解配置管理，配置管理有哪些基本概念。</li>
<li>2.基于CMMI讲述配置管理。</li>
<li>3.基于SVN搭建配置管理系统。</li>
</ul>
</li>
</ul>
<h2 id="理论放在实际中，配置管理到底是什么鬼"><a href="#理论放在实际中，配置管理到底是什么鬼" class="headerlink" title="理论放在实际中，配置管理到底是什么鬼"></a>理论放在实际中，配置管理到底是什么鬼</h2><ul>
<li>以管理电脑文件为例子，假设C盘专门用于安装软件，D盘一级目录分为01软件包、02音乐、03电影、04工作文件。这个时候配置管理可以理解为，记录每个硬盘分别装了什么，D盘下分了哪些目录，目录里面存放了哪些文件。</li>
<li>接下来要思考，哪些文件需要放在01，哪些需要放在02呢？按照文件一般形态分类，例如.rar和.exe是安装包，要往01这个目录去存放的，.mp3是音乐文件，要往02这个目录去存放的。到这个阶段其实有两份规章制度文件形成，第一是记录硬盘的目录结构是怎么样的，第二个就是规定什么类型的文件应该放到哪个目录结构下。</li>
<li>换个环境，你跟你的朋友一起共享这个目录，因为这个目录本身属于你个人，你不希望你的朋友去改动它，这个时候出现了两种角色，你自己和你朋友，你的权限是可以对文档目录里面的内容进行读和写操作的，而你的朋友只能读，现阶段你需要有一份文件，记录有谁参与文档分享的这个事情里，每个人的权限是什么（这里的权限是具体到人的）。</li>
<li>再放大一点，这个文档存放盘不是你的个人资产了，你没有绝对的权力去控制这个盘里面的结构和内容，参与到这个事情的人非常多，有各种各样的角色。这个时候需要有一份规章制度的文件，定义哪种角色应该赋予哪些权限，比方说爱看电影的，有权限给电影目录增删电影，但是没有权限访问软件包，不能修改音乐（这里的权限是具体到角色的）。</li>
<li>接下来你发现大家都在很随意修改里面的东西，你根本不知道以前有过什么文件，现在的文件是什么时候加进去的。所以你建立一个规定，每增加或删除一个文件都必须通过某个角色的审批，同事要用某种工具记录起来。</li>
<li>而作为一个管理员，就需要随时监控文档目录的变化、不同的文件是否放在相应的目录下面，参与人的权限是否正常，修改文件有没有提交申请，申请有没有被通过，修改文件之后有没有用工具记录清楚。</li>
<li>以上的这些过程，其实就是属于配置管理。再详细的话，就需要往下看了。</li>
</ul>
<h2 id="关于配置管理"><a href="#关于配置管理" class="headerlink" title="关于配置管理"></a>关于配置管理</h2><blockquote>
<p>配置管理的基本概念：<br>百度百科定义：<a href="http://baike.baidu.com/link?url=LiT1QsAwa3d929efYNCvB7a5-knpHls4HPcOrCz_e6b6g988EMvRgOWHPIRT4iQKaiDA8GFdZ0hfh5Ed_I_PWgcNrTw9cF7_Gc6c_286yRUUaU1BTctqG-mnPB6R668L" target="_blank" rel="external">配置管理</a>是通过技术或行政手段对软件产品及其开发过程和生命周期进行控制、规范的一系列措施。配置管理的目标是记录软件产品的演化过程，确保软件开发者在软件生命周期中各个阶段都能得到精确的产品配置。<br>维基百科定义：<a href="https://zh.wikipedia.org/wiki/%E7%B5%84%E6%85%8B%E7%AE%A1%E7%90%86" target="_blank" rel="external">配置管理</a>是一个创建系统工程的过程，用来创建与维持一个产品，让这个产品的性能、功能，以及它所要求的物理特性，在它的生命周期中，都能保持稳定与一致性。<br>IEEE610.12-90中定义：应用技术的和管理的指导和监督来：标识和用文档记录配置项的功能和物理特征、控制对这些特征的变更、记录和报告变更处理过程和实现状态、 验证与规定的需求的一致性。</p>
</blockquote>
<ul>
<li>从以上几条看来，其实可以抓到一个中心词，就是<strong>一致性</strong>，关于如何维护一致性后面我会详细的说，这里看看就行。</li>
<li>然后知乎上有个回答是介绍配置管理的我觉得还不错，你可以点击去看：<a href="https://www.zhihu.com/question/20621014" target="_blank" rel="external">配置管理的起源、发展历程和主要作用是什么？</a></li>
</ul>
<h2 id="关于配置项"><a href="#关于配置项" class="headerlink" title="关于配置项"></a>关于配置项</h2><ul>
<li>举个简单的例子，来解释有哪些可以算是配置项的。</li>
<li>假设你是大厨，你要创造一个新菜式给你的客户吃，首先按照客户的需求，全素不要辣，根据这个需求首先你要计划用哪些材料，采用哪种方式烹饪，接着你开始拟制材料清单，制作步骤，采购材料回来后，你按照材料清单和步骤做好菜，端出去给客户。</li>
<li>在这个过程里面，简单分了几个阶段：<ul>
<li>需求获取和分析：经过跟客户沟通，知道客户要的是全素并且不辣，这个时候输出了需求分析说明</li>
<li>方案设计：计划用的材料和烹饪方式，这个时候有了方案设计说明</li>
<li>开发阶段：拟制材料清单，根据材料清单购买材料；选择烹饪工具，烹饪的地点；记录烹饪步骤</li>
<li>结束：把成品确认OK了，把食物转交客户品尝</li>
</ul>
</li>
<li>这里面，需求分析说明，方案设计说明，材料清单，材料，烹饪工具，烹饪地点，烹饪步骤说明，成品，都可以算是配置项。甚至还有做这个菜，你参考了哪些烹饪书，这个书也应该纳入配置项的范围</li>
<li><code>CMMI-DEV V1.3</code>中是这样划定配置项范围的，粗暴点理解就是<strong>整个产品开发过程所有相关的事物，都可以称之为配置项</strong>：</li>
</ul>
<blockquote>
<p><img src="http://dusk-life.b0.upaiyun.com/2016/mywork_cm_introduce_1.jpg" alt="CMMI配置项1"><br><img src="http://dusk-life.b0.upaiyun.com/2016/mywork_cm_introduce_2.jpg" alt="CMMI配置项2"></p>
</blockquote>
<ul>
<li>由于<code>CMMI-DEV</code>由美国SEI发行后，经由台湾<strong>資訊工業策進會</strong>进行汉化，所以在部分词语上跟大陆的叫法不一样，<strong>建構管理</strong>指的其实就是配置管理，维基百科还叫<strong>組態管理</strong>。</li>
<li><code>CMMI-DEV V1.3</code>戳这里下载<a href="http://pan.baidu.com/s/1i5a4EpB" target="_blank" rel="external">o(￣▽￣)d</a></li>
</ul>
<h2 id="关于基线"><a href="#关于基线" class="headerlink" title="关于基线"></a>关于基线</h2><blockquote>
<p>在CMMI 的定义中，基线是指经正式审查及同意的一组规格或工作产品，据以用作未来发展的基础，而且仅能由变更管制程序变更。</p>
</blockquote>
<ul>
<li>以瀑布型开发模型来讲，一个项目的开发会分为项目立项、需求分析、设计、编码、测试、结项。在这六大阶段，其实可以建立五个基线，分别为：计划基线、需求基线、设计基线、测试基线和发布基线。而且基线一旦建立，不可随意变更。</li>
<li><strong>计划基线</strong>：在项目进行计划时建立，此时项目的计划应该是全面、清晰、准确并且文档化的。必要的文档包括<code>《项目总体计划》</code>、<code>《WBS计划》</code>。</li>
<li><strong>需求基线</strong>： 在需求分析规格说明书通过评审后建立，此时客户需求和产品需求应该是全面、清晰、准确并且文档化的。必要的文档包括<code>《需求分析规格》</code>和<code>《功能清单》</code></li>
<li><strong>设计基线</strong>：在详细设计完成并通过同行评审后建立。此时产品需求的实现方式应该是全面、清晰、准确和文档化的。必要的文档包括<code>《总体设计规格》</code>、<code>《详细设计规格》</code>、<code>《数据库设计》</code>。通常这些文档由设计人员提供。设计基线建立后，开发人员可以根据设计基线确定的成果进行代码开发。</li>
<li><strong>测试基线</strong>：在开发人员完成开发后，将软件系统交给测试人员测试时建立。测试基线是提供测试过程需要输入的文档或者环境，如<code>《测试用例》</code>。</li>
<li><strong>发布基线</strong>：是在测试阶段完成后建立。建立测试基线时，测试中发现的所有bug应该已经fixed或者未fixed但不影响系统使用。未fixed的bug作为遗留问题被记录下来。软件发布时，测试人员应该提供的文档包括<code>《readme》</code>（描述软件产品信息）、<code>《用户手册》</code>、<code>《安装配置手册》</code>、<code>《软件产品质量报告》</code>和产品安装包。</li>
</ul>
<h2 id="关于标识"><a href="#关于标识" class="headerlink" title="关于标识"></a>关于标识</h2><ul>
<li>标识有点等同于身份证号码，它是唯一的不应变更的。在有硬件的产品里，一般会以产品型号作为唯一的标识。-而特性就是这一个配置项具备的一些特征。</li>
<li>举个例子：</li>
</ul>
<blockquote>
<p><img src="http://dusk-life.b0.upaiyun.com/2016/mywork_cm_introduce_3.jpg" alt="CM_标识举例"></p>
</blockquote>
<ul>
<li>在这个例子里面，ABC-EFG就是产品的唯一标识，这份文件是测试规范还是原理图，版本是V1.00还是V1.01，文档的作者是谁，输出的日期是什么时候，文件的格式是什么，这些就是就是配置项的特性。</li>
</ul>
<h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><ul>
<li>先来假设没有版本管理会出现什么情况。</li>
<li>作为一个设计师来讲（无论是硬件设计，还是软件设计，还是UI设计），肯定免不了根据需求和现状不断改动设计稿（代码、设计图纸），有一个段子是这样的：</li>
</ul>
<blockquote>
<p>XX项目设计稿.PSD<br>XX项目设计稿修改版.PSD<br>XX项目设计稿最终版.PSD<br>XX项目设计稿最终版的修改版.PSD<br>XX项目设计稿最终版的最终版.PSD<br>XX项目设计稿最终版的最终版的修改版.PSD<br>XX项目设计稿最终版的最终版的最终版.PSD</p>
</blockquote>
<ul>
<li>假设到最后，客户觉得后面的这些版本都不行，要恢复到之前的某一个版本，那这个时候是不是会傻眼了，之前的哪个版本呀？这改动了那么多次，到底改了些啥呀？</li>
<li>在百度百科的解释中，版本控制是透过文档控制记录程序各个模组的改动，并为每次改动编上序号。版本控制它所管理的，除了要给每一次的输出做编号之外，还需要记录每一次的变动，当出现问题的时候，我们可以快速地追踪到版本之间的差异，并且能回滚到前面的状态。<br>版本控制的工具/方式有很多，<code>SVN</code>、<code>git</code>这些属于比较通用的。这类工具，他们是自动对变量进行记录的。</li>
</ul>
<h2 id="关于变更管理"><a href="#关于变更管理" class="headerlink" title="关于变更管理"></a>关于变更管理</h2><ul>
<li>变更管理的基本前提是有对基线进行定义。当某一个基线被建立起来后，意味着许多的工作是从该基线出发的。例如需求基线被建立后，工程师根据需求说明对系统架构、数据库进行设计，测试部门根据需求设计测试用例。</li>
<li>变更管理主要有以下四个事项：<ul>
<li>由外部需求变动或内部设计变动提出对基线进行变更。</li>
<li>评估确认变更所带来的影响，包括设计、进度、成本、风险、以及由一个变动所引起其他配置项的变动。</li>
<li>当变更申请被批准后执行变更，当变更被否决后关闭申请。</li>
<li>跟踪变更的执行情况，确认变更落实到位。</li>
</ul>
</li>
<li>执行变更管理能够带来的好处有：<ul>
<li>从开发一方来讲，对变更过程进行管理，一定程度上是对开发工作的起到保护作用，避免由于客户提出一些不考虑成本和后果的变更要求而导致项目延期、项目失败。通过对变更的内容进行评估，能够明确变更带来的影响，双方达成一致意见后再执行变更，避免后期出现互相推诿的现象。</li>
<li>从开发过程来讲，变更管理过程可以让项目干系人通过评估确认，明确变更带来的影响，明确配置项的变动范围，提前考虑风险的应对策略。</li>
<li>确认要执行变更后，会发出相应的通知告知项目干系人，可以避免出现信息不对称的情况。</li>
<li>通过变更管理，记录变更引起的各个配置项的变动，方便后期追溯。</li>
</ul>
</li>
</ul>
<h2 id="关于配置状态报告"><a href="#关于配置状态报告" class="headerlink" title="关于配置状态报告"></a>关于配置状态报告</h2><ul>
<li>简单理解，其实就是对配置项的管理状态的一个整体管理。例如项目处于哪个阶段，该项目有哪些配置项，哪些文件处于受控状态，文件被变动的次数情况，有助于项目干系人了解项目的内容和状态。</li>
</ul>
<h2 id="关于配置审计"><a href="#关于配置审计" class="headerlink" title="关于配置审计"></a>关于配置审计</h2><ul>
<li>配置审计，是维护和保证配置管理制度被执行的重要手段。一个制度是否被执行，执行的情况如何，是需要后期的跟踪的。而配置审计，就是对配置管理的执行情况的一个跟踪、反馈。</li>
<li>通过配置审计，除了可以了解到配置管理制度的执行情况，还可以通过观察执行过程，去发现现有制度可以优化或者改善的地方。而我觉得CMMI的核心思想，其实就是持续优化。</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><ul>
<li>如果你有计划在项目管理这块长久发展或者死磕到底的，我建议还是软考或者PMP报个名，有预算的你再报个班，逼自己听听课，这些证书不会对你薪酬福利有多大帮助，但是你可以通过这个机会系统地学习这门学科，这样在处理事情的时候你能够不断地去联想你现在在做的，是理论知识里面的哪部分，那么然后接下来会出现哪类型的状况或者下一个阶段是什么。</li>
</ul>
<h2 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h2><ul>
<li>通过解读CMMI 1.3关于配置管理的相关内容，引导你建立一套完整的配置管理系统。</li>
</ul>]]></content>
    
    <summary type="html">
    
      简单理解配置管理
    
    </summary>
    
      <category term="Working" scheme="http://dusklife.com/categories/Working/"/>
    
    
      <category term="配置管理" scheme="http://dusklife.com/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="文档管理" scheme="http://dusklife.com/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
    
      <category term="CM" scheme="http://dusklife.com/tags/CM/"/>
    
      <category term="过程支持" scheme="http://dusklife.com/tags/%E8%BF%87%E7%A8%8B%E6%94%AF%E6%8C%81/"/>
    
      <category term="项目管理" scheme="http://dusklife.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
